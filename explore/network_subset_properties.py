#!/usr/bin/env python
# coding: utf-8

# We wanted to check whether network subsets preserve the properties of their networks by subsetting either edges or nodes. To do this we take 3 unweighted "parent" networks and subset them: 
# - 1) a real world example (Lewis Lab github repository - Human-2020-Hou-LR-pairs.csv - https://github.com/LewisLabUCSD/Ligand-Receptor-Pairs)
# - 2) a random scale-free bipartite network 
# - 3) a normally distributed bipartite network generated by networkx

# In[1]:


import pandas as pd
import numpy as np
import networkx as nx
import igraph
from tqdm import tqdm
from multiprocessing import Pool

import sys
sys.path.insert(1, '../../../scripts')
from simulation.graphs import graph_generator
gg = graph_generator()


# # Generate Parent Networks

# In[2]:


# Parent Network 1
# load csv
hou = pd.read_excel('/data2/hratch/cci_dt/Ligand-Receptor-Pairs/Human/Human-2020-Hou-LR-pairs.xlsx')
G1 = nx.from_edgelist(list(zip(hou['Ligand gene symbol'], hou['Receptor gene symbol'])))

# # get properties for other parent networks
# G2 = Simulate().emulate_sf_network(G1)

# G3 = nx.bipartite.random_graph(len(set(hou['Ligand gene symbol']).intersection(G1.nodes)),
#                                len(set(hou['Receptor gene symbol']).intersection(G1.nodes)), p = 0.7)


# In[3]:


G = G1.copy()


# In[55]:


# lazy coding but gets the job done
tot_nodes = len(G.nodes)
res = gg.summarize(G).T
for col in ['subset_size', 'n_nodes_dropped', 'true_subset_size']:
    res[col] = float('nan')


n_iter = 1000
n_core = 20
for subset_size in tqdm([0.05,0.2,0.4,0.6,0.8]):
    def get_summary(i):
        try:
            G2 = gg.subset(G, subset_size = subset_size)
            n0 = len(G2.nodes)
            gg.drop_disconnected_nodes(G2)
            n1 = len(G2.nodes)

            summary = gg.summarize(G2).T
            summary['subset_size'] = subset_size
            summary['n_nodes_dropped'] = n0 - n1
            summary['true_subset_size'] = len(G2.nodes)/tot_nodes
            res_ = list(summary.values[0])
        except:
            res_ = None

        return res_
   
    pool = Pool(processes=n_core) 
    summ = pool.map(get_summary, range(n_iter))
    pool.close()
    
    if summ is not None:
        summary = pd.DataFrame(np.array(summ))
        summary.columns = res.columns
        res = pd.concat([res, summary])
res.to_csv('/data2/hratch/cci_dt/other_analyses/network_subset_properties.csv')

